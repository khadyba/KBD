{
    "sourceFile": "src/app/api/blog/[id]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1728657455737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728657467501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n-import { articles } from \"../data\";\n+const articles = [\n+    { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n+    { id: 2, title: \"Article 2\", author: \"Author 2\", date: \"2024-01-02\" },\n+  ];\n \n export async function GET( request : Request,{ params}:{ params: { id:string }}){\n       const article = articles.find((article) => article.id === parseInt(params.id))\n       return Response.json(article)\n"
                },
                {
                    "date": 1728657486115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const articles = [\n     { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n-    { id: 2, title: \"Article 2\", author: \"Author 2\", date: \"2024-01-02\" },\n+    { id: 2, title: \"Article 2\", author: \"Author 2\",, date: \"2024-01-02\" },\n   ];\n \n export async function GET( request : Request,{ params}:{ params: { id:string }}){\n       const article = articles.find((article) => article.id === parseInt(params.id))\n"
                },
                {
                    "date": 1728657491380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const articles = [\n     { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n-    { id: 2, title: \"Article 2\", author: \"Author 2\",, date: \"2024-01-02\" },\n+    { id: 2, title: \"Article 2\", author: \"Author 2\",description:\"\", date: \"2024-01-02\" },\n   ];\n \n export async function GET( request : Request,{ params}:{ params: { id:string }}){\n       const article = articles.find((article) => article.id === parseInt(params.id))\n"
                },
                {
                    "date": 1728657496773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const articles = [\n     { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n-    { id: 2, title: \"Article 2\", author: \"Author 2\",description:\"\", date: \"2024-01-02\" },\n+    { id: 2, title: \"Article 2\", author: \"Author 2\",description:\"la description\", date: \"2024-01-02\" },\n   ];\n \n export async function GET( request : Request,{ params}:{ params: { id:string }}){\n       const article = articles.find((article) => article.id === parseInt(params.id))\n"
                },
                {
                    "date": 1728722911206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,6 @@\n-const articles = [\n-    { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n-    { id: 2, title: \"Article 2\", author: \"Author 2\",description:\"la description\", date: \"2024-01-02\" },\n-  ];\n \n+\n export async function GET( request : Request,{ params}:{ params: { id:string }}){\n       const article = articles.find((article) => article.id === parseInt(params.id))\n       return Response.json(article)\n     }\n"
                },
                {
                    "date": 1728722920863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,30 @@\n+import \n+export async function GET(request: Request, { params }: { params: { id: string } }) {\n+  try {\n+    const article = await prisma.article.findUnique({\n+      where: { id: parseInt(params.id) },\n+    });\n \n-\n-export async function GET( request : Request,{ params}:{ params: { id:string }}){\n-      const article = articles.find((article) => article.id === parseInt(params.id))\n-      return Response.json(article)\n+    if (!article) {\n+      return new Response(JSON.stringify({ error: \"Article non trouvÃ©\" }), {\n+        status: 404,\n+        headers: { \"Content-Type\": \"application/json\" },\n+      });\n     }\n \n+    return new Response(JSON.stringify(article), {\n+      status: 200,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+  } catch (error) {\n+    return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n+      status: 500,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+  }\n+}\n+\n     export async function PATCH(request: Request, { params }: { params: { id: string } }) {\n       const body = await request.json();\n       const { title, description, date, author } = body;\n       const index = articles.findIndex((article) => article.id === parseInt(params.id));\n"
                },
                {
                    "date": 1728722927194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import \n+import { Prisma } from \"@prisma/client\";\n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728722937677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { Prisma } from \"@prisma/client\";\n+const = \n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728722947275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { Prisma } from \"@prisma/client\";\n-const = \n+\n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728722957637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Prisma } from \"@prisma/client\";\n \n+const prisma = new PrismaClient();\n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728722974128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n-import { Prisma } from \"@prisma/client\";\n \n-const prisma = new PrismaClient();\n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728722993380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-\n+import prisma from '@/lib/prisma';\n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728723006110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import prisma from '@/lib/prisma';\n+import prisma from '@/';\n+\n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728723011508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import prisma from '@/';\n+import prisma from '.';\n \n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n"
                },
                {
                    "date": 1728723018429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import prisma from '.';\n+import prisma from '@';\n \n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n"
                },
                {
                    "date": 1728723052378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import prisma from '@';\n+import prisma from '@prisma/client';\n \n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n@@ -24,22 +24,42 @@\n     });\n   }\n }\n \n-    export async function PATCH(request: Request, { params }: { params: { id: string } }) {\n-      const body = await request.json();\n-      const { title, description, date, author } = body;\n-      const index = articles.findIndex((article) => article.id === parseInt(params.id));\n-      if (index !== -1) {\n-        articles[index].title = title || articles[index].title; \n-        articles[index].description = description || articles[index].description;\n-        articles[index].date = date || articles[index].date;\n-        articles[index].author = author || articles[index].author;\n-        return  Response.json(articles[index]);\n-      } else {\n-        return  Response.json({ error: \"Article non trouvÃ©\" }), { status: 404 };\n-      }\n+export async function PATCH(request: Request, { params }: { params: { id: string } }) {\n+  try {\n+    const body = await request.json();\n+    const { title, description, date, author } = body;\n+\n+    const updatedArticle = await prisma.article.update({\n+      where: { id: parseInt(params.id) },\n+      data: {\n+        title: title,\n+        description: description,\n+        date: new Date(date),\n+        author: author,\n+      },\n+    });\n+\n+    return new Response(JSON.stringify(updatedArticle), {\n+      status: 200,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+  } catch (error) {\n+    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n+      return new Response(JSON.stringify({ error: \"Article non trouvÃ©\" }), {\n+        status: 404,\n+        headers: { \"Content-Type\": \"application/json\" },\n+      });\n     }\n+\n+    return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n+      status: 500,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+  }\n+}\n+\n     \n     export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n       const index = articles.findIndex((article) => article.id === parseInt(params.id, 10));\n       if (index === -1) {\n"
                },
                {
                    "date": 1728723059653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   try {\n     const body = await request.json();\n     const { title, description, date, author } = body;\n \n-    const updatedArticle = await prisma.article.update({\n+    const updatedArticle = await prisma.articles.update({\n       where: { id: parseInt(params.id) },\n       data: {\n         title: title,\n         description: description,\n"
                },
                {
                    "date": 1728723089570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   try {\n     const body = await request.json();\n     const { title, description, date, author } = body;\n \n-    const updatedArticle = await prisma.articles.update({\n+    const updatedArticle = await prisma.article.update({\n       where: { id: parseInt(params.id) },\n       data: {\n         title: title,\n         description: description,\n@@ -59,19 +59,28 @@\n   }\n }\n \n     \n-    export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n-      const index = articles.findIndex((article) => article.id === parseInt(params.id, 10));\n-      if (index === -1) {\n-          return new Response(JSON.stringify({ message: \"Article not found\" }), {\n-              status: 404,\n-              headers: { \"Content-Type\": \"application/json\" },\n-          });\n-      }\n-      const deletedArticle = articles.splice(index, 1)[0];\n-      return new Response(JSON.stringify(deletedArticle), {\n-          status: 200,\n-          headers: { \"Content-Type\": \"application/json\" },\n+export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n+  try {\n+    const deletedArticle = await prisma.article.delete({\n\\ No newline at end of file\n+      where: { id: parseInt(params.id) },\n+    });\n+\n+    return new Response(JSON.stringify(deletedArticle), {\n+      status: 200,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+  } catch (error) {\n+    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n+      return new Response(JSON.stringify({ error: \"Article non trouvÃ©\" }), {\n+        status: 404,\n+        headers: { \"Content-Type\": \"application/json\" },\n       });\n+    }\n+\n+    return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n+      status: 500,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n   }\n-  \n+}\n"
                },
                {
                    "date": 1728723286447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n-import prisma from '@prisma/client';\n+import { PrismaClient } from '@prisma/client';\n \n+const prisma = new PrismaClient();\n+\n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const article = await prisma.article.findUnique({\n       where: { id: parseInt(params.id) },\n@@ -58,9 +60,8 @@\n     });\n   }\n }\n \n-    \n export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const deletedArticle = await prisma.article.delete({\n       where: { id: parseInt(params.id) },\n@@ -82,5 +83,5 @@\n       status: 500,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n   }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1728723315192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,8 @@\n       where: { id: parseInt(params.id) },\n       data: {\n         title: title,\n         description: description,\n-        date: new Date(date),\n         author: author,\n       },\n     });\n \n"
                },
                {
                    "date": 1728723390449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,20 +18,22 @@\n     return new Response(JSON.stringify(article), {\n       status: 200,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n-  } catch (error) {\n+  }catch (error) {\n+    console.error(\"Server Error:\", error);\n     return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n       status: 500,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n-  }\n }\n \n+}\n+\n export async function PATCH(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const body = await request.json();\n-    const { title, description, date, author } = body;\n+    const { title, description, author } = body;\n \n     const updatedArticle = await prisma.article.update({\n       where: { id: parseInt(params.id) },\n       data: {\n"
                },
                {
                    "date": 1728723479454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import { PrismaClient } from '@prisma/client';\n+import prisma from '@prisma/client';\n \n+\n const prisma = new PrismaClient();\n \n export async function GET(request: Request, { params }: { params: { id: string } }) {\n   try {\n"
                },
                {
                    "date": 1728723510180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       status: 200,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n   } catch (error) {\n-    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n+    if (error instanceof prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n       return new Response(JSON.stringify({ error: \"Article non trouvÃ©\" }), {\n         status: 404,\n         headers: { \"Content-Type\": \"application/json\" },\n       });\n@@ -60,8 +60,16 @@\n     return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n       status: 500,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n+}\n+\n+    }\n+\n+    return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n+      status: 500,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n   }\n }\n \n export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n"
                },
                {
                    "date": 1728723525079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n       status: 500,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n   }\n-}\n \n+\n export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n   try {\n     const deletedArticle = await prisma.article.delete({\n       where: { id: parseInt(params.id) },\n"
                },
                {
                    "date": 1728723534784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       status: 200,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n   } catch (error) {\n-    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n+    if (error instanceof prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n       return new Response(JSON.stringify({ error: \"Article non trouvÃ©\" }), {\n         status: 404,\n         headers: { \"Content-Type\": \"application/json\" },\n       });\n@@ -60,8 +60,15 @@\n     return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n       status: 500,\n       headers: { \"Content-Type\": \"application/json\" },\n     });\n+}\n+\n+\n+    return new Response(JSON.stringify({ error: \"Erreur interne du serveur\" }), {\n+      status: 500,\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n   }\n }\n \n export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n"
                }
            ],
            "date": 1728657455737,
            "name": "Commit-0",
            "content": "import { articles } from \"../data\";\n\nexport async function GET( request : Request,{ params}:{ params: { id:string }}){\n      const article = articles.find((article) => article.id === parseInt(params.id))\n      return Response.json(article)\n    }\n\n    export async function PATCH(request: Request, { params }: { params: { id: string } }) {\n      const body = await request.json();\n      const { title, description, date, author } = body;\n      const index = articles.findIndex((article) => article.id === parseInt(params.id));\n      if (index !== -1) {\n        articles[index].title = title || articles[index].title; \n        articles[index].description = description || articles[index].description;\n        articles[index].date = date || articles[index].date;\n        articles[index].author = author || articles[index].author;\n        return  Response.json(articles[index]);\n      } else {\n        return  Response.json({ error: \"Article non trouvÃ©\" }), { status: 404 };\n      }\n    }\n    \n    export async function DELETE(request: Request, { params }: { params: { id: string } }) {\n      const index = articles.findIndex((article) => article.id === parseInt(params.id, 10));\n      if (index === -1) {\n          return new Response(JSON.stringify({ message: \"Article not found\" }), {\n              status: 404,\n              headers: { \"Content-Type\": \"application/json\" },\n          });\n      }\n      const deletedArticle = articles.splice(index, 1)[0];\n      return new Response(JSON.stringify(deletedArticle), {\n          status: 200,\n          headers: { \"Content-Type\": \"application/json\" },\n      });\n  }\n  "
        }
    ]
}