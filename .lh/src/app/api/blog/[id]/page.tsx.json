{
    "sourceFile": "src/app/api/blog/[id]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1728656635297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728656641221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // /pages/api/blog/[id].ts\n \n import { NextApiRequest, NextApiResponse } from 'next';\n \n-let articles = [\n+const articles = [\n   { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n   { id: 2, title: \"Article 2\", author: \"Author 2\", date: \"2024-01-02\" },\n ];\n \n"
                },
                {
                    "date": 1728721643019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,8 @@\n // /pages/api/blog/[id].ts\n \n import { NextApiRequest, NextApiResponse } from 'next';\n \n-const articles = [\n-  { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n-  { id: 2, title: \"Article 2\", author: \"Author 2\", date: \"2024-01-02\" },\n-];\n \n // Gérer les requêtes GET et DELETE\n export default function handler(req: NextApiRequest, res: NextApiResponse) {\n   const { id } = req.query;\n"
                },
                {
                    "date": 1728721746053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,48 @@\n-// /pages/api/blog/[id].ts\n-\n+import { PrismaClient } from '@prisma/client';\n import { NextApiRequest, NextApiResponse } from 'next';\n \n+const prisma = new PrismaClient();\n \n-// Gérer les requêtes GET et DELETE\n-export default function handler(req: NextApiRequest, res: NextApiResponse) {\n-  const { id } = req.query;\n-  const articleIndex = articles.findIndex((article) => article.id === parseInt(id as string));\n+export default async function handler(req: NextApiRequest, res: NextApiResponse) {\n+    const { id } = req.query;\n \n-  if (req.method === 'GET') {\n-    // Récupérer un article spécifique\n-    if (articleIndex !== -1) {\n-      res.status(200).json(articles[articleIndex]);\n+    if (req.method === 'GET') {\n+        try {\n+            // Récupérer un article spécifique depuis la base de données\n+            const article = await prisma.article.findUnique({\n+                where: {\n+                    id: parseInt(id as string),\n+                },\n+            });\n+\n+            if (article) {\n+                res.status(200).json(article);\n+            } else {\n+                res.status(404).json({ message: \"Article not found\" });\n+            }\n+        } catch (error) {\n+            console.error('Erreur lors de la récupération de l\\'article:', error);\n+            res.status(500).json({ message: 'Erreur interne du serveur' });\n+        }\n+    } else if (req.method === 'DELETE') {\n+        try {\n+            // Supprimer un article spécifique\n+            const deletedArticle = await prisma.article.delete({\n+                where: {\n+                    id: parseInt(id as string),\n+                },\n+            });\n+\n+            res.status(200).json(deletedArticle);\n+        } catch (error) {\n+            console.error('Erreur lors de la suppression de l\\'article:', error);\n+            if (error.code === 'P2025') { // Prisma renvoie cette erreur si l'article n'existe pas\n+                res.status(404).json({ message: \"Article not found\" });\n+            } else {\n+                res.status(500).json({ message: 'Erreur interne du serveur' });\n+            }\n+        }\n     } else {\n-      res.status(404).json({ message: \"Article not found\" });\n+        res.status(405).json({ message: \"Method not allowed\" });\n     }\n-  } else if (req.method === 'DELETE') {\n-    // Supprimer un article spécifique\n-    if (articleIndex !== -1) {\n-      const deletedArticle = articles.splice(articleIndex, 1);\n-      res.status(200).json(deletedArticle);\n-    } else {\n-      res.status(404).json({ message: \"Article not found\" });\n-    }\n-  } else {\n-    res.status(405).json({ message: \"Method not allowed\" });\n-  }\n }\n"
                },
                {
                    "date": 1728721777583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \n             if (article) {\n                 res.status(200).json(article);\n             } else {\n-                res.status(404).json({ message: \"Article not found\" });\n+                res.status(404).json({ message: \"Article n\" });\n             }\n         } catch (error) {\n             console.error('Erreur lors de la récupération de l\\'article:', error);\n             res.status(500).json({ message: 'Erreur interne du serveur' });\n"
                },
                {
                    "date": 1728721783112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \n             if (article) {\n                 res.status(200).json(article);\n             } else {\n-                res.status(404).json({ message: \"Article n\" });\n+                res.status(404).json({ message: \"Article no trouvé\" });\n             }\n         } catch (error) {\n             console.error('Erreur lors de la récupération de l\\'article:', error);\n             res.status(500).json({ message: 'Erreur interne du serveur' });\n"
                },
                {
                    "date": 1728722052101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,44 +5,72 @@\n \n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\n     const { id } = req.query;\n \n-    if (req.method === 'GET') {\n-        try {\n-            // Récupérer un article spécifique depuis la base de données\n-            const article = await prisma.article.findUnique({\n-                where: {\n-                    id: parseInt(id as string),\n-                },\n-            });\n+    switch (req.method) {\n+        case 'GET':\n+            try {\n+                const article = await prisma.article.findUnique({\n+                    where: {\n+                        id: parseInt(id as string),\n+                    },\n+                });\n \n-            if (article) {\n-                res.status(200).json(article);\n-            } else {\n-                res.status(404).json({ message: \"Article no trouvé\" });\n+                if (article) {\n+                    res.status(200).json(article);\n+                } else {\n+                    res.status(404).json({ message: \"Article not found\" });\n+                }\n+            } catch (error) {\n+                handleError(res, error);\n             }\n-        } catch (error) {\n-            console.error('Erreur lors de la récupération de l\\'article:', error);\n-            res.status(500).json({ message: 'Erreur interne du serveur' });\n-        }\n-    } else if (req.method === 'DELETE') {\n-        try {\n-            // Supprimer un article spécifique\n-            const deletedArticle = await prisma.article.delete({\n-                where: {\n-                    id: parseInt(id as string),\n-                },\n-            });\n+            break;\n \n-            res.status(200).json(deletedArticle);\n-        } catch (error) {\n-            console.error('Erreur lors de la suppression de l\\'article:', error);\n-            if (error.code === 'P2025') { // Prisma renvoie cette erreur si l'article n'existe pas\n-                res.status(404).json({ message: \"Article not found\" });\n-            } else {\n-                res.status(500).json({ message: 'Erreur interne du serveur' });\n+        case 'DELETE':\n+            try {\n+                const deletedArticle = await prisma.article.delete({\n+                    where: {\n+                        id: parseInt(id as string),\n+                    },\n+                });\n+\n+                res.status(200).json(deletedArticle);\n+            } catch (error) {\n+                handleError(res, error);\n             }\n+            break;\n+\n+        case 'PUT':\n+            try {\n+                const updatedData = req.body; // Contient les nouvelles données de l'article\n+                const updatedArticle = await prisma.article.update({\n+                    where: {\n+                        id: parseInt(id as string),\n+                    },\n+                    data: updatedData,\n+                });\n+\n+                res.status(200).json(updatedArticle);\n+            } catch (error) {\n+                handleError(res, error);\n+            }\n+            break;\n+\n+        default:\n+            res.status(405).json({ message: \"Method not allowed\" });\n+            break;\n+    }\n+}\n+\n+// Fonction générique pour gérer les erreurs\n+function handleError(res: NextApiResponse, error: unknown) {\n+    if (error instanceof Error) {\n+        console.error('Erreur:', error.message);\n+        if ((error as any).code === 'P2025') {\n+            res.status(404).json({ message: \"Article not found\" });\n+        } else {\n+            res.status(500).json({ message: 'Erreur interne du serveur' });\n         }\n     } else {\n-        res.status(405).json({ message: \"Method not allowed\" });\n+        res.status(500).json({ message: 'Erreur inconnue' });\n     }\n }\n"
                },
                {
                    "date": 1728722074956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n             break;\n \n         case 'PUT':\n             try {\n-                const updatedData = req.body; // Contient les nouvelles données de l'article\n+                const updatedData = req.body; \n                 const updatedArticle = await prisma.article.update({\n                     where: {\n                         id: parseInt(id as string),\n                     },\n"
                },
                {
                    "date": 1728722268844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,15 +62,17 @@\n }\n \n // Fonction générique pour gérer les erreurs\n function handleError(res: NextApiResponse, error: unknown) {\n-    if (error instanceof Error) {\n-        console.error('Erreur:', error.message);\n-        if ((error as any).code === 'P2025') {\n-            res.status(404).json({ message: \"Article not found\" });\n-        } else {\n-            res.status(500).json({ message: 'Erreur interne du serveur' });\n-        }\n-    } else {\n-        res.status(500).json({ message: 'Erreur inconnue' });\n-    }\n+  if (error instanceof Error) {\n+      console.error('Erreur:', error.message);\n+      \n+      // Vérification du code d'erreur pour Prisma\n+      if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n+          res.status(404).json({ message: \"Article not found\" });\n+      } else {\n+          res.status(500).json({ message: 'Erreur interne du serveur' });\n+      }\n+  } else {\n+      res.status(500).json({ message: 'Erreur inconnue' });\n+  }\n }\n"
                },
                {
                    "date": 1728722787552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,15 +64,8 @@\n // Fonction générique pour gérer les erreurs\n function handleError(res: NextApiResponse, error: unknown) {\n   if (error instanceof Error) {\n       console.error('Erreur:', error.message);\n-      \n-      // Vérification du code d'erreur pour Prisma\n-      if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {\n-          res.status(404).json({ message: \"Article not found\" });\n-      } else {\n-          res.status(500).json({ message: 'Erreur interne du serveur' });\n-      }\n   } else {\n       res.status(500).json({ message: 'Erreur inconnue' });\n   }\n }\n"
                },
                {
                    "date": 1728723095154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import { PrismaClient } from '@prisma/client';\n import { NextApiRequest, NextApiResponse } from 'next';\n \n const prisma = new PrismaClient();\n-\n export default async function handler(req: NextApiRequest, res: NextApiResponse) {\n     const { id } = req.query;\n \n     switch (req.method) {\n"
                },
                {
                    "date": 1728728988075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n                 handleError(res, error);\n             }\n             break;\n \n-        case 'PUT':\n+        case 'PATCH':\n             try {\n                 const updatedData = req.body; \n                 const updatedArticle = await prisma.article.update({\n                     where: {\n"
                }
            ],
            "date": 1728656635297,
            "name": "Commit-0",
            "content": "// /pages/api/blog/[id].ts\n\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nlet articles = [\n  { id: 1, title: \"Article 1\", author: \"Author 1\", date: \"2024-01-01\" },\n  { id: 2, title: \"Article 2\", author: \"Author 2\", date: \"2024-01-02\" },\n];\n\n// Gérer les requêtes GET et DELETE\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const { id } = req.query;\n  const articleIndex = articles.findIndex((article) => article.id === parseInt(id as string));\n\n  if (req.method === 'GET') {\n    // Récupérer un article spécifique\n    if (articleIndex !== -1) {\n      res.status(200).json(articles[articleIndex]);\n    } else {\n      res.status(404).json({ message: \"Article not found\" });\n    }\n  } else if (req.method === 'DELETE') {\n    // Supprimer un article spécifique\n    if (articleIndex !== -1) {\n      const deletedArticle = articles.splice(articleIndex, 1);\n      res.status(200).json(deletedArticle);\n    } else {\n      res.status(404).json({ message: \"Article not found\" });\n    }\n  } else {\n    res.status(405).json({ message: \"Method not allowed\" });\n  }\n}\n"
        }
    ]
}